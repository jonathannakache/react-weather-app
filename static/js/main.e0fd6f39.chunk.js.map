{"version":3,"sources":["components/SearchBar.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","city","inputRef","useRef","onSubmit","e","preventDefault","current","value","placeholder","className","type","ref","icons","Mist","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Weather","useState","weather","setWeather","useEffect","Axios","get","then","res","document","body","data","main","toLowerCase","description","icon","temp","name","catch","err","console","log","id","Math","round","App","setCity","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"4QAuBeA,MArBf,YAA8B,IAATC,EAAQ,EAARA,KACbC,EAAWC,iBAAO,MAQxB,OACE,0BAAMC,SAPa,SAACC,GACpBA,EAAEC,iBACFL,EAAKC,EAASK,QAAQC,OACtBN,EAASK,QAAQC,MAAQ,GACzBN,EAASK,QAAQE,YAAc,mBAGDC,UAAU,cACtC,2BACEC,KAAK,OACLD,UAAU,aACVE,IAAKV,EACLO,YAAY,sB,iBCXdI,EAAQ,CACZC,KAAM,cACNC,aAAc,yBACdC,QAAS,iBACTC,KAAM,qBACNC,KAAM,iBACNC,WAAY,iBACZC,MAAO,kBACPC,OAAQ,oBA2CKC,MAxCf,YAA4B,IAATrB,EAAQ,EAARA,KAAQ,EACKsB,mBAAS,IADd,mBAClBC,EADkB,KACTC,EADS,KAoBzB,OAlBAC,qBAAU,WACRC,IAAMC,IAAN,UAhBY,sDAgBZ,OAAuB3B,EAAvB,kBAjBY,mCAiBZ,0BACG4B,MAAK,SAACC,GACLC,SAASC,KAAKtB,UAAYoB,EAAIG,KAAKT,QAAQ,GAAGU,KAAKC,cACnDV,EAAW,CACTW,YAAaN,EAAIG,KAAKT,QAAQ,GAAGY,YACjCF,KAAMJ,EAAIG,KAAKT,QAAQ,GAAGU,KAC1BG,KAAMP,EAAIG,KAAKT,QAAQ,GAAGa,KAC1BC,KAAMR,EAAIG,KAAKC,KAAKI,KACpBC,KAAMT,EAAIG,KAAKM,UAGlBC,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,QAC7B,CAACxC,IAEJyC,QAAQC,IAAInB,EAAQU,KAAM,QAC1BQ,QAAQC,IAAa,KAAT1C,EAAa,QAGvB,yBAAKS,UAAU,WACZc,EAAQe,MACP,oCACE,wBAAI7B,UAAU,cAAcc,EAAQe,MACpC,uBAAGK,GAAG,KAAKlC,UAAWG,EAAMW,EAAQU,MAAMC,gBAC1C,4BACGX,EAAQc,MACP,0BAAM5B,UAAU,aAAhB,IAA8BmC,KAAKC,MAAMtB,EAAQc,MAAjD,SAEF,0BAAM5B,UAAU,4BAAhB,IACIc,EAAQY,YADZ,IAC0B,SC7BvBW,MAdf,WAAgB,IAAD,EACWxB,mBAAS,IADpB,mBACNtB,EADM,KACA+C,EADA,KAIb,OACE,yBAAKtC,UAAU,OACb,yBAAKA,UAAU,aACb,kBAAC,EAAD,CAAWT,KAAM,SAACA,GAAD,OAAU+C,EAAQ/C,MACnC,kBAAC,EAAD,CAASA,KAAMA,O,MCDHgD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASxB,SAASyB,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdrB,OAAM,SAAAsB,GACLpB,QAAQoB,MAAMA,EAAMC,c","file":"static/js/main.e0fd6f39.chunk.js","sourcesContent":["import React, { useRef } from \"react\";\n\nfunction SearchBar({ city }) {\n  const inputRef = useRef(null);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    city(inputRef.current.value);\n    inputRef.current.value = \"\";\n    inputRef.current.placeholder = \"Tapez une ville\";\n  };\n  return (\n    <form onSubmit={handleSubmit} className=\"search-bar\">\n      <input\n        type=\"text\"\n        className=\"search-bar\"\n        ref={inputRef}\n        placeholder=\"Tapez une ville\"\n      />\n    </form>\n  );\n}\n\nexport default SearchBar;\n","import React, { useEffect, useState } from \"react\";\nimport Axios from \"axios\";\n\nconst API_KEY = \"dce781b2f988c11ca536248397a31ff2\";\nconst API_URL = \"https://api.openweathermap.org/data/2.5/weather?q=\";\n\nconst icons = {\n  Mist: \"wi wi-windy\",\n  Thunderstorm: \"wi wi-day-thunderstorm\",\n  Drizzle: \"wi wi-day-rain\",\n  Rain: \"wi wi-day-sprinkle\",\n  Snow: \"wi wi-day-snow\",\n  Atmosphere: \"wi wi-day-snow\",\n  Clear: \"wi wi-day-sunny\",\n  Clouds: \"wi wi-day-cloudy\",\n};\n\nfunction Weather({ city }) {\n  const [weather, setWeather] = useState(\"\");\n  useEffect(() => {\n    Axios.get(`${API_URL}${city}&appid=${API_KEY}&lang=fr&units=metric`)\n      .then((res) => {\n        document.body.className = res.data.weather[0].main.toLowerCase();\n        setWeather({\n          description: res.data.weather[0].description,\n          main: res.data.weather[0].main,\n          icon: res.data.weather[0].icon,\n          temp: res.data.main.temp,\n          name: res.data.name,\n        });\n      })\n      .catch((err) => console.log(err));\n  }, [city]);\n\n  console.log(weather.main, \"MAIN\");\n  console.log(city === \"\", \"city\");\n\n  return (\n    <div className=\"weather\">\n      {weather.name && (\n        <>\n          <h2 className=\"title is-1\">{weather.name}</h2>\n          <i id=\"wi\" className={icons[weather.main].toLowerCase()}></i>\n          <h3>\n            {weather.temp && (\n              <span className=\"is-size-2\"> {Math.round(weather.temp)}Â°C</span>\n            )}\n            <span className=\"is-size-2 is-capitalized\">\n              ({weather.description}){\" \"}\n            </span>\n          </h3>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default Weather;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport SearchBar from \"./components/SearchBar\";\nimport Weather from \"./components/Weather\";\n\nfunction App() {\n  const [city, setCity] = useState(\"\");\n  \n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <SearchBar city={(city) => setCity(city)} />\n        <Weather city={city} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"bulma/css/bulma.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}